heat_template_version: 2013-05-23

description: >
  Deploys a new Drupal 7 web site on IIS with a local SQL Server Express using WebPI.

parameters:
  key_name:
    description: Name of an existing EC2 KeyPair to encrypt the Admin password
    type: string

  instance_type:
    description: EC2 instance type
    type: string
    default: m1.small
    constraints:
      - allowed_values: [m1.sminy, m1.small, m1.medium, m1.large m1.xlarge]
        description: must be a valid EC2 instance type.

  image_id:
    default: Windows Server 2012 R2 Std Eval VHD
    description: Windows image version of choice
    type: string
    constraints:
      - allowed_values: [ Windows Server 2012 Std Eval VHD, Windows Server 2012 R2 Std Eval VHD ]
        description: must be a valid Windows image

  public_network_id:
    type: string
    description: Id of an existing public network where a floating IP will be allocated

  private_network_id:
    type: string
    description: Id of an existing private network

  db_password:
    description: The Drupal database password
    type: string
    constraints:
      - length: { min: 8 }

  drupal_admin:
    default: admin
    description: The Drupal admin username
    type: string
    constraints:
      - length: { min: 1 }

  drupal_admin_password:
    description: The Drupal admin user's password
    type: string
    constraints:
      - length: { min: 8 }

  drupal_site_name:
    default: My Drupal site created with Heat!
    description: The Drupal site name
    type: string
    constraints:
      - length: { min: 1 }

resources:
  iis:
    type: OS::Nova::Server
    properties:
      image: { get_param: image_id }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: iis_neutron_port }
      user_data:
        str_replace:
          template: |
            #ps1_sysnative
            $ErrorActionPreference = 'Stop'
            function ExecRetry($command, $maxRetryCount = 10, $retryInterval=2)
            {
                $currErrorActionPreference = $ErrorActionPreference
                $ErrorActionPreference = "Continue"

                $retryCount = 0
                while ($true)
                {
                    try
                    {
                        & $command
                        break
                    }
                    catch [System.Exception]
                    {
                        $retryCount++
                        if ($retryCount -ge $maxRetryCount)
                        {
                            $ErrorActionPreference = $currErrorActionPreference
                            throw
                        }
                        else
                        {
                            Write-Error $_.Exception
                            Start-Sleep $retryInterval
                        }
                    }
                }

                $ErrorActionPreference = $currErrorActionPreference
            }

            $webPiMsi = "WebPlatformInstaller_amd64_en-US.msi"
            $webPiUrl = "http://download.microsoft.com/download/7/0/4/704CEB4C-9F42-4962-A2B0-5C84B0682C7A/$webPiMsi"
            $webPiMsiPath = "$ENV:Temp\$webPiMsi"
            ExecRetry { (new-object System.Net.WebClient).DownloadFile($webPiUrl, $webPiMsiPath) }

            cd "$ENV:Temp"
            ExecRetry {
              $p = Start-Process -Wait msiexec.exe -PassThru -ArgumentList "/i $webPiMsiPath /qn /l*v webpi_msi_log.txt"
              if ($p.ExitCode -ne 0) { throw "msiexec failed to install WebPI" }
            }
            del $webPiMsiPath

            $ENV:PATH+=";$Env:ProgramFiles\Microsoft\Web Platform Installer\"
            Set-Content deploy.app "Application Path[@]Default Web Site`nDatabase Password[@]db_password`ndbAdminPassword[@]db_password"
            ExecRetry {
              webpicmd /Install /Application:AcquiaDrupal@deploy.app /AcceptEULA /SQLPassword:db_password
              if ($LastExitCode) { throw "webpicmd failed" }
            }
            del deploy.app

            $drushMsi="Drush-6.0-2013-08-28-Installer-v1.0.21.msi"
            $drushUrl="http://www.drush.org/sites/default/files/attachments/$drushMsi"
            $drushMsiPath = "$ENV:Temp\$drushMsi"
            ExecRetry { (new-object System.Net.WebClient).DownloadFile($drushUrl, $drushMsiPath) }

            ExecRetry {
              $p = Start-Process -Wait msiexec.exe -PassThru -ArgumentList "/i $drushMsiPath /qn /l*v drush_msi_log.txt"
              if ($p.ExitCode -ne 0) { throw "msiexec failed to install Drush" }
            }
            del $drushMsiPath

            import-module WebAdministration
            cd (Get-Item 'IIS:\Sites\Default Web Site').physicalpath.replace("%SystemDrive%", "$ENV:SystemDrive")

            icacls "$ENV:SystemRoot\Temp" /grant "IUSR:(OI)(CI)(M)"
            if ($LastExitCode) { throw "Failed to set permissions on temporary directory" }

            $ENV:Path+=";$ENV:ProgramData\Drush\;${ENV:ProgramFiles(x86)}\Drush\GnuWin32\bin;${ENV:ProgramFiles(x86)}\Drush\Php"
            ExecRetry {
              drush site-install standard --account-name="drupal_admin" --account-pass="drupal_admin_password" --site-name="drupal_site_name" -y
              if ($LastExitCode) { throw "Drush failed" }
            }
          params:
            db_password: { get_param: db_password }
            drupal_admin: { get_param: drupal_admin }
            drupal_admin_password: { get_param: drupal_admin_password }
            drupal_site_name: { get_param: drupal_site_name }

  iis_neutron_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_network_id }

  iis_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_network_id }
      port_id: { get_resource: iis_neutron_port }

outputs:
  drupal_url:
    description: Drupal URL
    value:
      str_replace:
        template: http://host
        params:
          host: { get_attr: [ iis_floating_ip, floating_ip_address ] }
